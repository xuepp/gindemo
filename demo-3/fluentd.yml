kind: ConfigMap
apiVersion: v1
metadata:
  name: fluentd-conf # ConfigMap 名称
  namespace: demo # 所属命名空间
data:
  # 容器日志采集配置
  containers.input.conf: |-
    <source>
      @id fluentd-containers.log
      @type tail  # 从日志文件尾部持续读取
      path /var/log/containers/*.log  # Kubernetes 容器日志路径
      pos_file /var/log/es-containers.log.pos  # 记录日志读取位置，避免重复
      tag raw.kubernetes.*  # 日志标签，用于后续处理匹配
      read_from_head true  # 从文件开头读取日志（初次启动时有用）

      # 日志格式解析（支持多种格式）
      <parse>
        @type multi_format  # 支持多种解析格式
        # 第一：JSON 格式日志
        <pattern>
          format json
          time_key time  # 日志中的时间字段名
          time_format %Y-%m-%dT种%H:%M:%S.%NZ  # 时间格式（UTC）
        </pattern>
        # 第二种：标准输出格式（时间 + 日志内容）
        <pattern>
          format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
          time_format %Y-%m-%dT%H:%M:%S.%N%:z
        </pattern>
      </parse>
    </source>

    # 处理异常堆栈（多行合并）
    <match raw.kubernetes.**>
      @id raw.kubernetes
      @type detect_exceptions  # 插件：识别并合并多行异常堆栈日志
      remove_tag_prefix raw  # 移除 raw 前缀，方便后续匹配
      message log  # 要处理的字段
      multiline_flush_interval 5  # 最大等待时间（秒）后强制输出
    </match>

    # 拼接多行日志（如 Java 日志）
    <filter **>
      @id filter_concat
      @type concat  # 拼接插件
      key message  # 需要拼接的字段
      multiline_end_regexp /\n$/  # 以换行符结尾表示日志行结束
      separator ""  # 拼接时不加分隔符
    </filter>

    # 加载 Kubernetes 的元数据（pod 名、命名空间、标签等）
    <filter kubernetes.**>
      @id filter_kubernetes_metadata
      @type kubernetes_metadata
    </filter>

    # 尝试解析日志字段为 JSON
    <filter kubernetes.**>
      @id filter_parser
      @type parser
      key_name log  # 需要解析的字段
      reserve_data true  # 保留原始字段
      remove_key_name_field true  # 如果解析成功，移除原字段
      <parse>
        @type multi_format
        <pattern>
          format json
        </pattern>
        <pattern>
          format none  # 解析失败时，保留原始日志
        </pattern>
      </parse>
    </filter>

    # 删除不需要的 Kubernetes 元字段，减少日志大小
    <filter kubernetes.**>
      @type record_transformer
      remove_keys $.docker.container_id,$.kubernetes.container_image_id,$.kubernetes.pod_id,$.kubernetes.namespace_id,$.kubernetes.master_url,$.kubernetes.labels.pod-template-hash
    </filter>

    # 只保留打了 logging=true 标签的 Pod 的日志
    <filter kubernetes.**>
      @id filter_log
      @type grep
      <regexp>
        key $.kubernetes.labels.logging
        pattern ^true$
      </regexp>
    </filter>

  # 接收其他 Fluentd 节点转发的日志（聚合使用）
  forward.input.conf: |-
    <source>
      @id forward
      @type forward  # TCP 接收器，监听转发日志
    </source>

  # 输出到 Elasticsearch
  output.conf: |-
    <match **>
      @id elasticsearch
      @type elasticsearch  # 输出插件类型
      @log_level info  # 输出日志级别
      include_tag_key true  # 包含 tag 字段
      #host elasticsearch-client  # Elasticsearch 服务名（可解析为 ClusterIP）
      host elasticsearch-client.logging.svc
      # host 172.184.169.3  # 或者直接写 IP（备用）
      port 9200
      user elastic  # ES 用户名
      password 1qaz@WSX  # ES 密码
      logstash_format true  # 按 logstash 格式输出（带时间戳索引）
      logstash_prefix gindemo  # 索引前缀，如 gindemo-2025.04.25
      request_timeout 30s  # 超时设置

      # 缓冲配置，提升性能和容错能力
      <buffer>
        @type file  # 使用文件方式进行缓存
        path /var/log/fluentd-buffers/kubernetes.system.buffer  # 缓冲文件路径
        flush_mode interval  # 定时刷新到 ES
        retry_type exponential_backoff  # 指数回退重试策略
        flush_thread_count 2  # 同时刷新线程数
        flush_interval 5s  # 每 5 秒刷新一次
        retry_forever  # 一直重试
        retry_max_interval 30  # 最大重试间隔（秒）
        chunk_limit_size 2M  # 每个日志块最大 2MB
        queue_limit_length 8  # 最大缓存队列长度
        overflow_action block  # 队列满时阻塞（防止丢日志）
      </buffer>
    </match>

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd-es
  namespace: demo
  labels:
    k8s-app: fluentd-es
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fluentd-es
  labels:
    k8s-app: fluentd-es
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
rules:
  - apiGroups:
      - ""
    resources:
      - "namespaces"
      - "pods"
    verbs:
      - "get"
      - "watch"
      - "list"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fluentd-es
  namespace: demo
  labels:
    k8s-app: fluentd-es
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
  - kind: ServiceAccount
    name: fluentd-es
    namespace: demo
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: fluentd-es
  apiGroup: ""
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: demo
  labels:
    app: fluentd
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    matchLabels:
      app: fluentd
  template:
    metadata:
      labels:
        app: fluentd
        kubernetes.io/cluster-service: "true"
    spec:
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: fluentd-es
      containers:
        - name: fluentd
          image: quay.io/fluentd_elasticsearch/fluentd:v3.4.0
          volumeMounts:
            - name: fluentconfig
              mountPath: /etc/fluent/config.d
            - name: varlog
              mountPath: /var/log
      nodeSelector:
        kubernetes.io/hostname: aks-dev-21200703-vmss000000
      volumes:
        - name: fluentconfig
          configMap:
            name: fluentd-conf
        - name: varlog
          hostPath:
            path: /var/log
